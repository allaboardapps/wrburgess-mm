---
id: 1
keywords: activestorage, ruby on rails, postgresql, uuid, Randy Burgess
title: Using ActiveStorage with UUIDs on Rails 5.2 and PostgreSQL
date: 2018/02/03 09:00:00AM
updated_at: 2018/02/05 01:00:00PM
block: 'no'
published: true
---

How to make Rails 5.2rc, ActiveStorage, and UUIDs on PostgreSQL work together with some small adjustments to the standard setup process.

READMORE

Most of the ActiveStorage tutorials out there in the blogosphere, which have been posted in anticipation of the Rails 5.2 stable launch, show you how to utilize ActiveStorage with the standard sequential model IDs (integers). But what if you want to use UUIDs for the unique keys on your Rails models?  

In this short tutorial I will show you how to get Rails 5.2.0rc1, ActiveStorage, and UUIDs on PostgreSQL working.  

## Installing Rails 5.2rc1

I don't need to repeat the same basic setups that have been written before, so I'll recommend you follow the following posts for those instructions:

* [Rails 5.2:
Active Storage and beyond](https://evilmartians.com/chronicles/rails-5-2-active-storage-and-beyond)
* [Rails Guides: Active Storage Overview](http://edgeguides.rubyonrails.org/active_storage_overview.html)

Bottom line, you need to install rails with `rails _5.2.0.rc1_ new app_name` and then run *bundle install* for your gems

Next, tell Rails to utilize PostgreSQL instead of sqlite: [Ruby on Rails Switch From Sqlite3 to Postgres](https://www.daveferrara1.com/ruby-in-rails-switch-from-sqlite3-to-postgres/)

**But put on the brakes** after you run the `rails active_storage:install` command. You need to jump in and change a few things on the generated migrations.

## Changes to ActiveStorage migrations

You'll need to ensure your PostgreSQL database is ready for UUIDs in the first place. Add these lines to a migration:

    enable_extension "uuid-ossp"
    enable_extension "pgcrypto"

Also, you may want to reference this post for more about the initial setup of UUIDs in your app: [Rails 5.1 + Using a UUID as a primary key in ActiveRecord with PostgreSQL](https://lab.io/articles/2017/04/13/uuids-rails-5-1/)

[Full page example](https://github.com/wrburgess/active_storage_with_uuids/blob/master/db/migrate/20180204011656_create_active_storage_tables.active_storage.rb)

## Changes to Tables

Make changes to the initial setup of both *active_storage_blobs* and *active_storage_attachments* tables to utilize the uuid datatypes for their model id fields:

    create_table :active_storage_blobs, id: :uuid, default: -> { "gen_random_uuid()" } do |t|
      ...
    end

    create_table :active_storage_attachments, id: :uuid, default: -> { "gen_random_uuid()" } do |t|
      ...
    end

[Full page example](https://github.com/wrburgess/active_storage_with_uuids/blob/master/db/migrate/20180204011656_create_active_storage_tables.active_storage.rb)

Do the same for your other models that will have associated ActiveStorage instances. In this case, I'm using a generic *Post* model:

    create_table "posts", id: :uuid, default: -> { "gen_random_uuid()" }, force: :cascade do |t|
      ...
    end

[Full page example](https://github.com/wrburgess/active_storage_with_uuids/blob/master/db/migrate/20180204011656_create_active_storage_tables.active_storage.rb)

## Changes to Fields

The above changes simply cover the setup of the tables. Now we'll make changes to the actual references fields which will break by default:

Change your *active_storage_attachments* table from this:

    create_table :active_storage_attachments do |t|
      t.string     :name,     null: false
      t.references :record,   null: false, polymorphic: true, index: false # default, problematic instruction
      t.references :blob,     null: false # default, problematic instruction

      t.datetime :created_at, null: false

      t.index [ :record_type, :record_id, :name, :blob_id ], name: "index_active_storage_attachments_uniqueness", unique: true
    end

To this:

    create_table :active_storage_attachments, id: :uuid, default: -> { "gen_random_uuid()" } do |t|
      t.string :name,     null: false
      t.uuid :record_id, null: false     # replaces t.references :record
      t.string :record_type, null: false # replaces t.references :record
      t.uuid :blob_id,     null: false   # replaces t.references :blob
      t.datetime :created_at, null: false

      t.index [ :record_type, :record_id, :name, :blob_id ], name: "index_active_storage_attachments_uniqueness", unique: true
    end

[Full page example](https://github.com/wrburgess/active_storage_with_uuids/blob/master/db/migrate/20180204011656_create_active_storage_tables.active_storage.rb)

## That's It

Yep, that's all there is to it (after you get Rails, PG, and UUIDs set up). The biggest issue you're overcoming with these changes is that Rails does not understand using UUIDs natively and will set up the polymorphic and association IDs as normal, sequential integers.  

Thus, the changes above explicitly tell Rails to use UUIDs instead of the traditional IDs for the necessary associations.  

## Feedback

If you have problems with these instructions, please [shoot me an email](mailto:randy@allaboardapps.com) or [create an issue on the source repo](https://github.com/wrburgess/active_storage_with_uuids/issues) and I'll see what's up!

## Notes

* The source code for my example (GitHub): [wrburgess/active_storage_with_uuids](https://github.com/wrburgess/active_storage_with_uuids)
* [Installing Rails 5.2 rc1](http://weblog.rubyonrails.org/2017/3/20/Rails-5-1-rc1/)
* [Ruby on Rails Switch From Sqlite3 to Postgres](https://www.daveferrara1.com/ruby-in-rails-switch-from-sqlite3-to-postgres/) by Dave Ferrara
* [Rails 5.1 + Using a UUID as a primary key in ActiveRecord with PostgreSQL](https://lab.io/articles/2017/04/13/uuids-rails-5-1/) by Adam Butler at Lab.io
* Credit goes to Evil Martian's Andy Barnov and Vladimir Dementyev for their work on this post, which got me started: [Rails 5.2:
Active Storage and beyond](https://evilmartians.com/chronicles/rails-5-2-active-storage-and-beyond)
* There's derivate credit that goes to [Mike Gunderloy](https://afreshcup.com/about/) for an earlier post on the same subject: [Active Storage Samples](https://afreshcup.com/home/2017/07/23/activestorage-samples)
* The official docs - [Rails Guides: Active Storage Overview](http://edgeguides.rubyonrails.org/active_storage_overview.html)

## Other things to check out

* My company: [All Aboard Apps](https://www.allaboardapps.com)
* My podcast: [CTO Think](https://www.ctothink.com)
* My upcoming product: [HOA Done](https://www.hoadone.com)
